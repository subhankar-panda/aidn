{"version":3,"sources":["serviceWorker.js","pages/HomePage/index.js","components/Nav.js","pages/DoctorsPage/index.js","pages/EntryPage/index.js","pages/SignUpPage/index.js","pages/LoginPage/index.js","Routes.js","index.js"],"names":["Boolean","window","location","hostname","match","App","className","src","TopNav","props","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","NavbarText","DoctorsPage","React","Component","EntryPage","customInputForm","field","form","touched","errors","Input","invalid","name","FormFeedback","SignUpPage","validationSchema","Yup","firstName","max","required","lastName","email","initialValues","address","password","onSubmit","values","console","log","Form","FormGroup","Label","for","type","component","Button","LoginPage","Routes","withLayout","Child","path","exact","this","HomePage","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5ac33d47.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './index.css'; // Import css modules stylesheet as styles\n\nfunction App() {\n  return (\n    <div className='container h-100 d-flex'>\n      <div className=\"row my-auto w-100\">\n        <div className=\"col-md-6\">\n          <img src='/aidnlogo.png' className=\"img-fluid\"></img>\n        </div>\n        <div className=\"col-md-6 d-flex\">\n          <div className=\"my-auto text-center w-100 home-text\">\n            some catchy tagline here\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText\n} from 'reactstrap';\n\nconst TopNav = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href=\"/\">aidn.</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"/components/\">something</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"www.google.com\">some other thing</NavLink>\n            </NavItem>\n            <UncontrolledDropdown nav inNavbar>\n              <DropdownToggle nav caret>\n                Options\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem>\n                  Option 1\n                </DropdownItem>\n                <DropdownItem>\n                  Option 2\n                </DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem>\n                  Reset\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </Nav>\n          <NavbarText>Simple Text</NavbarText>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default TopNav;","import React from 'react';\n\nclass DoctorsPage extends React.Component {\n\n  render() {\n    return (\n      <div>\n        this is the page a doctor or healthcare professional would see\n      </div>\n    );\n  }\n}\n\nexport default DoctorsPage;","import React from 'react';\n\nclass EntryPage extends React.Component {\n\n  render() {\n    return (\n      <div>\n        this is the page which will have a form to have a user enter their \n        health history / data \n        \n        maybe even the picture here? or is that on sign in?\n      </div>\n    );\n  }\n}\n\nexport default EntryPage;","import React from 'react';\nimport { Formik, useFormik, Field } from 'formik';\nimport { Input, FormFeedback, Form, FormGroup, Label, Button } from \"reactstrap\";\n\nimport * as Yup from 'yup';\n\nconst customInputForm = ({field, form: {touched, errors}, ...props}) => (\n  <div>\n      <Input\n          invalid={!!(touched[field.name] && errors[field.name])}\n          {...field}\n          {...props} />\n      {touched[field.name] && errors[field.name] && <FormFeedback>{errors[field.name]}</FormFeedback>}\n  </div>\n);\n\nconst SignUpPage = () => {\n\n  var validationSchema =  Yup.object({\n    firstName: Yup.string()\n      .max(15, 'Must be 15 characters or less')\n      .required('Required'),\n    lastName: Yup.string()\n      .max(20, 'Must be 20 characters or less')\n      .required('Required'),\n    email: Yup.string()\n      .email('Invalid email address')\n      .required('Required'),\n  })\n  return (\n    <Formik\n                initialValues={{\n                    email: '',\n                    address: '',\n                    password: ''\n                }}\n                validationSchema={validationSchema}\n                onSubmit={values => {\n                    // same shape as initial values\n                    console.log(values);\n                }}>\n              <div className=\"d-flex\">\n                <img src=\"../../aidnlogo.png\" className=\"img-thumbnail w-25 text-center m-auto\"></img>\n                <Form className=\"w-50 mx-auto mt-5\">\n                    <FormGroup>\n                        <Label for=\"firstName\">first name</Label>\n                        <Field name=\"firstName\" type={'text'} component={customInputForm}/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"lastName\">last name</Label>\n                        <Field name=\"lastName\" type={'text'} component={customInputForm}/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"exampleEmail\">email</Label>\n                        <Field name=\"email\" type={'email'} component={customInputForm}/>\n                    </FormGroup>\n                    {/*<FormGroup>\n                        <Label for=\"address\">Address</Label>\n                        <Field name=\"address\" type={'text'} component={customInputForm}/>\n                    </FormGroup>*/}\n                    <FormGroup>\n                        <Label for=\"examplePassword\">password</Label>\n                        <Field name=\"password\" type={'password'} component={customInputForm}/>\n                    </FormGroup>\n                    <Button color=\"info\" >Submit</Button>\n                </Form>\n              </div>\n            </Formik>\n  );\n};\n\nexport default SignUpPage;","import React from 'react';\n\nclass LoginPage extends React.Component {\n\n  render() {\n    return (\n      <div>\n        This is the login page\n      </div>\n    );\n  }\n}\n\nexport default LoginPage;","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport Nav from './components/Nav';\nimport DoctorsPage from './pages/DoctorsPage';\nimport EntryPage from './pages/EntryPage';\nimport SignUpPage from './pages/SignUpPage';\nimport LoginPage from './pages/LoginPage';\n\nclass Routes extends React.Component {\n\n  withLayout = (Child) => (\n    <>\n      <Nav />\n      <Child />\n    </>\n  );\n\n  render() {\n    return (\n      <Switch>\n        <Route path=\"/\" exact={true}>\n          {this.withLayout(HomePage)}\n        </Route>\n        <Route path=\"/doctors\" exact={true}>\n          {this.withLayout(DoctorsPage)}\n        </Route>\n        <Route path=\"/medical-history\" exact={true}>\n          {this.withLayout(EntryPage)}\n        </Route>\n        <Route path=\"/signup\" exact={true}>\n          {this.withLayout(SignUpPage)}\n        </Route>\n        <Route path=\"/login\" exact={true}>\n          {this.withLayout(LoginPage)}\n        </Route>\n      </Switch>\n\n    );\n  }\n}\n\nexport default Routes;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\nimport Routes from './Routes';\n\nimport 'bootstrap/dist/css/bootstrap.css'\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <Routes />\n  </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}